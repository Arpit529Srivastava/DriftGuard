name: Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans weekly
    - cron: '0 2 * * 1'

jobs:
  # SAST (Static Application Security Testing)
  sast:
    name: SAST
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: go, python, javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Dependency scanning
  dependency-scan:
    name: Dependency Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Check Go dependencies
        run: |
          go mod download
          go list -m all | grep -E "(CVE|vulnerability)" || echo "No known vulnerabilities found in Go dependencies"

      - name: Check Python dependencies
        run: |
          if [ -f "ai/requirements.txt" ]; then
            pip install safety
            safety check -r ai/requirements.txt --json > safety-report.json || true
            echo "Safety check completed"
          fi

      - name: Check Node.js dependencies
        run: |
          if [ -f "web/package.json" ]; then
            cd web
            npm audit --audit-level=moderate || true
          fi

  # Container scanning
  container-scan:
    name: Container Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker images
        run: |
          if [ -f "Dockerfile" ]; then
            docker build -t driftguard-backend:test .
          fi
          if [ -f "ai/Dockerfile" ]; then
            docker build -t driftguard-ai:test ai/
          fi
          if [ -f "web/Dockerfile" ]; then
            docker build -t driftguard-frontend:test web/
          fi

      - name: Run Trivy vulnerability scanner on images
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'driftguard-backend:test'
          format: 'sarif'
          output: 'trivy-image-backend.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Run Trivy vulnerability scanner on AI image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'driftguard-ai:test'
          format: 'sarif'
          output: 'trivy-image-ai.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Run Trivy vulnerability scanner on frontend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'driftguard-frontend:test'
          format: 'sarif'
          output: 'trivy-image-frontend.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload container scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-image-backend.sarif'

      - name: Upload AI image scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-image-ai.sarif'

      - name: Upload frontend image scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-image-frontend.sarif'

  # Secret scanning
  secret-scan:
    name: Secret Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run TruffleHog
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Patterns for potential secrets
            const secretPatterns = [
              /password\s*=\s*['"][^'"]+['"]/i,
              /secret\s*=\s*['"][^'"]+['"]/i,
              /token\s*=\s*['"][^'"]+['"]/i,
              /key\s*=\s*['"][^'"]+['"]/i,
              /api_key\s*=\s*['"][^'"]+['"]/i,
              /private_key\s*=\s*['"][^'"]+['"]/i,
              /aws_access_key_id\s*=\s*['"][^'"]+['"]/i,
              /aws_secret_access_key\s*=\s*['"][^'"]+['"]/i,
              /github_token\s*=\s*['"][^'"]+['"]/i,
              /slack_webhook_url\s*=\s*['"][^'"]+['"]/i
            ];
            
            function checkFile(filePath) {
              try {
                const content = fs.readFileSync(filePath, 'utf8');
                for (const pattern of secretPatterns) {
                  if (pattern.test(content)) {
                    core.warning(`Potential secret found in ${filePath}`);
                  }
                }
              } catch (error) {
                // File might be binary or not readable
              }
            }
            
            function walkDir(dir) {
              const files = fs.readdirSync(dir);
              for (const file of files) {
                const filePath = path.join(dir, file);
                const stat = fs.statSync(filePath);
                
                if (stat.isDirectory() && !file.startsWith('.') && file !== 'node_modules' && file !== '.git') {
                  walkDir(filePath);
                } else if (stat.isFile() && /\.(go|py|js|ts|yaml|yml|json|env|toml|tf|hcl)$/.test(file)) {
                  checkFile(filePath);
                }
              }
            }
            
            walkDir('.');
            console.log('Secret scanning completed');

  # License compliance
  license-check:
    name: License Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check license file
        run: |
          if [ ! -f "LICENSE" ] && [ ! -f "LICENSE.txt" ] && [ ! -f "LICENSE.md" ]; then
            echo "No LICENSE file found"
            exit 1
          fi
          echo "License file found"

      - name: Check for license headers
        run: |
          # Check for license headers in source files
          find . -name "*.go" -o -name "*.py" -o -name "*.js" -o -name "*.ts" | head -10 | xargs grep -l "Copyright\|License" || echo "Some files may be missing license headers"

  # Security policy check
  security-policy:
    name: Security Policy Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check security policy
        run: |
          if [ ! -f ".github/SECURITY.md" ]; then
            echo "No SECURITY.md file found"
            exit 1
          fi
          echo "Security policy found"

      - name: Validate security policy
        run: |
          # Check if security policy contains required sections
          if [ -f ".github/SECURITY.md" ]; then
            grep -q "## Reporting a Vulnerability" .github/SECURITY.md || echo "Security policy missing vulnerability reporting section"
            grep -q "## Supported Versions" .github/SECURITY.md || echo "Security policy missing supported versions section"
          fi 